require 'fileutils'

DESTINATION_ROOT = '/home_local/vorontsovie/greco-bit-data-processing/release_6_motifs'

def read_matrix(fn)
  bn = File.basename(fn, File.extname(fn))
  lns = File.readlines(fn).map(&:chomp)
  header = lns[0].start_with?('>') ? lns.shift[1..-1].strip : bn
  matrix = lns.map{|l| l.split("\t") }
  {motif: header, matrix: matrix}
end

def write_matrix(fn, motif)
  File.open(fn, 'w'){|fw|
    fw.puts ">#{motif[:motif]}"
    motif[:matrix].each{|row|
      fw.puts row.join("\t")
    }
  }
end

def read_pavelkrav_matrix(fn)
  bn = File.basename(fn, File.extname(fn))
  mat = File.readlines(fn).map{|l| l.chomp.split }
  raise unless mat.size == 4
  {motif: bn, matrix: mat.transpose}
end

def read_hughes_ppm_matrix(fn)
  lns = File.readlines(fn).map(&:strip).reject(&:empty?)
  raise unless lns[0].start_with?("Gene\t")
  raise unless lns[1].start_with?("Motif\t")
  raise unless lns[2].start_with?("Pos\t")
  gene = lns[0].split("\t", 2).last
  motif = lns[1].split("\t", 2).last
  pos = lns[2].split("\t")
  raise  unless pos == ['Pos', 'A', 'C', 'G', 'T']
  matrix = lns.drop(3).map{|l|
    l.split(/\s/, 2).last
  }
  begin
    matrix = matrix.map{|l|
      # m = l.strip.match(/^(\d(\.\d+)?)\s+(\d(\.\d+)?)\s+(\d(\.\d+)?)\s+(\d(\.\d+)?)$/)
      # [1,3,5,7].map{|idx| m[idx] }
      row = l.strip.split("\t")
      raise  unless row.size == 4 
      row.each{|x| Float(x) } # try convert
      row
    }
  rescue
    # puts "(Warning) No separating spaces in #{fn}" # All such occurrences are generated by Streme
    matrix = matrix.map{|l|
      m = l.strip.match(/^(\d\.\d+)\s*(\d\.\d+)\s*(\d\.\d+)\s*(\d\.\d+)$/)
      (1..4).map{|idx| m[idx] }
    }
  end
  raise 'Sum not equal to 1.0' unless (matrix.size > 1) && matrix.all?{|row| (row.map{|x| Float(x) }.sum - 1.0).abs < 0.01 }
  {gene: gene, motif: motif, matrix: matrix}
end


def reformat_hughes_afs_chs_sms!
  source_motifs_folder = '/mnt/space/hughes/March2021'
  destination_motifs_folder = "#{DESTINATION_ROOT}/Hughes"

  FileUtils.mkdir_p(destination_motifs_folder)

  ['AFS', 'CHS', 'SMS', 'SMSPublished'].each{|subfolder|
    ['Homer', 'Meme', 'RCade', 'Streme'].each{|tool|
      Dir.glob("#{source_motifs_folder}/#{subfolder}/#{tool}/*").reject{|fn|
        bn = File.basename(fn)
        ['_homer1.ppm', '_homer2.ppm', '_homer3.ppm'].include?(bn)
      }.each{|fn|
        begin
          bn = File.basename(fn, '.ppm')
          tf_info, exp_type, _, main_info = bn.split('@')
          _, ds_name, motif_name = main_info.split('.')
          _, motif_name = motif_name.split('_')
          new_fn = "#{tf_info}@#{exp_type}@#{ds_name}@Hughes.#{tool}@#{motif_name}.ppm"
          
          raise  unless File.dirname(fn).start_with?("#{source_motifs_folder}/")
          rel_dn = File.dirname(fn)[(source_motifs_folder.length + 1) .. -1]
          # puts 
          new_dn = "#{destination_motifs_folder}/#{rel_dn}"
          FileUtils.mkdir_p(new_dn)
          motif = read_hughes_ppm_matrix(fn)
          write_matrix("#{new_dn}/#{new_fn}", motif)
        rescue
          puts fn
          raise
        end
      }
    }
  }
end

# returns mapping {dataset_id: dataset_fn}
def get_dataset_id_mapping
  list_of_datasets = Dir.glob('/home_local/vorontsovie/greco-data/release_6.2021-02-13/**/*').select{|fn|
    File.file?(fn)
  }.reject{|fn|
    File.basename(fn) == 'stats.tsv'
  }

  dataset_by_id = list_of_datasets.each_with_object({}){|ds,h|
    bn = File.basename(ds)
    ds_name = bn.split('@')[3].split('.')[1]
    h[ds_name] = ds
  }
  dataset_by_id
end

def reformat_hughes_autoseed_hts!(dataset_by_id)
  # ZNF384@HT-SELEX_Lysate@droopy-jade-urchin.Train@AJolmaAutoseed@Cyc2_MultiNom1_SeedAAAAAAAA.ppm
  source_motifs_folder = '/mnt/space/hughes/March2021'
  destination_motifs_folder = "#{DESTINATION_ROOT}/Hughes"

  Dir.glob("#{source_motifs_folder}/Autoseed_HT-SELEX/*").reject{|fn|
    bn = File.basename(fn)
    ['Unknown'].include?(bn)
  }.each{|fn|
    bn = File.basename(fn, '.ppm')
    tf, exp_type, ds_info, tool, motif_name = bn.split('@')
    case exp_type
    when 'HT-SELEX_Lysate'
      exp_type = 'HTS.Lys'
    when 'HT-SELEX_IVT'
      exp_type = 'HTS.IVT'
    else
      raise 'Unknown experiment type'
    end
    ds_name = ds_info.split('.').first
    raise  unless tool.downcase == 'AJolmaAutoseed'.downcase
    tool = 'AJolma.Autoseed'

    original_dataset = dataset_by_id[ds_name]
    original_dataset_bn = File.basename(original_dataset)
    tf_info = original_dataset_bn.split('@').first
    exp_type_2 = original_dataset_bn.split('@')[1]
    raise  unless tf == tf_info.split('.').first
    raise  unless exp_type == exp_type_2

    new_fn = "#{tf_info}@#{exp_type}@#{ds_name}@#{tool}@#{motif_name}.ppm"
    rel_dn = 'Autoseed_HT-SELEX'
    new_dn = "#{destination_motifs_folder}/#{rel_dn}"
    FileUtils.mkdir_p(new_dn)
    begin
      motif = read_hughes_ppm_matrix(fn)
      write_matrix("#{new_dn}/#{new_fn}", motif)
    rescue
      puts "Error #{fn}"
    end
  }
end

def reformat_hughes_autoseed_sms!(dataset_by_id)
  # CEBPB.NA@SMS@SRR3405054.5GCTCTTCCGATCTACTATCA.3TGATAGTGATCGGAAGAGCT@Reads.jumpy-chocolate-boar.Train@Ajolma_Autoseed_Multinom1_OneHitAllReads_Seed_RTTGCGYAAN.ppm
  source_motifs_folder = '/mnt/space/hughes/March2021'
  destination_motifs_folder = "#{DESTINATION_ROOT}/Hughes"

  Dir.glob("#{source_motifs_folder}/Autoseed_SmileSeq/*").reject{|fn|
    bn = File.basename(fn)
    ['Unknown'].include?(bn)
  }.each{|fn|
    bn = File.basename(fn, '.ppm')
    tf_info, exp_type, _, ds_info, motif_info = bn.split('@')
    raise unless exp_type == 'SMS'
    raise  unless motif_info.start_with?('Ajolma_Autoseed_')
    motif_name = motif_info.sub(/^Ajolma_Autoseed_/, '')
    tool = 'AJolma.Autoseed'
    ds_name = ds_info.split('.')[1]

    original_dataset = dataset_by_id[ds_name]
    original_dataset_bn = File.basename(original_dataset)
    tf_info_2 = original_dataset_bn.split('@').first
    exp_type_2 = original_dataset_bn.split('@')[1]
    raise  unless tf_info == tf_info_2
    raise  unless exp_type == exp_type_2

    new_fn = "#{tf_info}@#{exp_type}@#{ds_name}@#{tool}@#{motif_name}.ppm"
    rel_dn = 'Autoseed_SmileSeq'
    new_dn = "#{destination_motifs_folder}/#{rel_dn}"
    FileUtils.mkdir_p(new_dn)
    begin
      motif = read_hughes_ppm_matrix(fn)
      write_matrix("#{new_dn}/#{new_fn}", motif)
    rescue
      puts "Error #{fn}"
    end
  }
end

def construct_corrected_basename(fn)
  bn = File.basename(fn)
  tf_info, *rest = bn.split('@')
  tf, construction = tf_info.split('.', 2)
  construction = construction.empty? ? 'NA' : construction
  ["#{tf}.#{construction}", *rest].join("@")
end

# Fix bug in Jan's motif names due to a bug in our dataset names (missing `construction` in PBMs)
def rename_jangrau_pbm!
  source_motifs_folder = '/home_local/jangrau/models'
  destination_motifs_folder = "#{DESTINATION_ROOT}/jangrau"
  ['PBM.QNZS', 'PBM.SDQN'].each{|subfolder|
    src = "#{source_motifs_folder}/#{subfolder}"
    dst =  "#{destination_motifs_folder}/#{subfolder}"
    FileUtils.mkdir_p(dst)
    Dir.glob("#{src}/*").each{|fn|
      corrected_bn = construct_corrected_basename(fn)
      dst_fn = "#{dst}/#{corrected_bn}"
      FileUtils.cp(fn, dst_fn)
    }
  }
end

def full_motif_name(short_fn, dataset_by_id, team_info_proc: ->(x){ x })
  bn = File.basename(short_fn)
  tf, dataset_id, team_info, motif_name_plus_ext = bn.split('@')
  raise 'Multidataset not yet implemented'  if dataset_id.split('+').size != 1
  ds_name = File.basename(dataset_by_id[dataset_id])
  tf_info, exp_type, exp_info, other = ds_name.split('@')
  processing_type, dataset_id_2, slice_type, *extensions = other.split('.')
  raise  unless dataset_id == dataset_id_2
  team_info = team_info_proc.call(team_info)
  "#{tf_info}@#{exp_type}@#{dataset_id}@#{team_info}@#{motif_name_plus_ext}"
end

def rename_ofornes_motifs!(dataset_by_id)
  source_motifs_folder = '/home_local/ofornes/PCMs'
  destination_motifs_folder = "#{DESTINATION_ROOT}/ofornes"
  FileUtils.mkdir_p(destination_motifs_folder)
  Dir.glob("#{source_motifs_folder}/*").each{|fn|
    dst_fn = full_motif_name(fn, dataset_by_id,
      team_info_proc: ->(team_info){ team_info.sub(/^JASPAR_/, 'JASPAR.') }
    )
    write_matrix("#{destination_motifs_folder}/#{dst_fn}", read_matrix(fn))
  }
end

def reformat_pavelkrav_motifs!
  [
    {source_motifs_folder: '/home_local/pavelkrav/GRECO_2_iter_pcms/CHS',
     destination_motifs_folder: "#{DESTINATION_ROOT}/VIGG/CHS"},
    {source_motifs_folder: '/home_local/pavelkrav/GRECO_2_iter_pcms/AFS',
     destination_motifs_folder: "#{DESTINATION_ROOT}/VIGG/AFS.Peaks"},
  ].each do |folders|
    FileUtils.mkdir_p folders[:destination_motifs_folder]
    Dir.glob("#{folders[:source_motifs_folder]}/*").each{|fn|
      bn = File.basename(fn)
      dest_fn = "#{folders[:destination_motifs_folder]}/#{bn}"
      write_matrix(dest_fn, read_pavelkrav_matrix(fn))
    }
  end
end

dataset_by_id = get_dataset_id_mapping

reformat_hughes_afs_chs_sms!
reformat_hughes_autoseed_hts!(dataset_by_id)
reformat_hughes_autoseed_sms!(dataset_by_id)

rename_jangrau_pbm!
rename_ofornes_motifs!(dataset_by_id)

reformat_pavelkrav_motifs!
